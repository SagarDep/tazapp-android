def versionMajor = 3
def versionMinor = 2
def versionPatch = 0
def versionBuild = 1

def supportLibVer = "25.3.0"
def buildToolsVer = "25.0.2"
def compileSdkVer = 25
def targetSdkVer = 25
def minSdkVer = 15

def tazPlist = '"https://dl.taz.de/tpaperIssue.plist"'
def tazPlistArchiv = '"https://dl.taz.de/tpaperIssue.plist?start=%1$s&end=%2$s"'
def tazStagingPlist = '"https://dl.taz.de/tpaperIssueTest.plist"'
def tazStagingPlistArchiv = '"https://dl.taz.de/tpaperIssueTest.plist?start=%1$s&end=%2$s"'
def tazAboUrl = '"https://www.taz.de/zeitung/abo/digitales-abo/apaper"'
def tazCheckLogin = '"https://dl.taz.de/digiAboCheckLogin"'
def tazResourceUrl = '"https://dl.taz.de/ressourcen"'
def tazArchiveUrl = '"https://dl.taz.de/tpaperArchiv"'

def lmdPlist = '"https://dl.monde-diplomatique.de/tpaperIssue.plist"'
def lmdPlistArchiv = '"https://dl.monde-diplomatique.de/tpaperIssue.plist?start=%1$s&end=%2$s"'
def lmdStagingPlist = '"https://dl.monde-diplomatique.de/tpaperIssueTest.plist"'
def lmdStagingPlistArchiv = '"https://dl.monde-diplomatique.de/tpaperIssueTest.plist?start=%1$s&end=%2$s"'
def lmdAboUrl = '"https://dl.monde-diplomatique.de/zeitung/abo/digitales-abo/apaper"'
def lmdCheckLogin = '"https://dl.monde-diplomatique.de/digiAboCheckLogin"'
def lmdResourceUrl = '"https://dl.monde-diplomatique.de/ressourcen"'
def lmdArchiveUrl = '"https://dl.monde-diplomatique.de/tpaperArchiv"'

def plistUrl = "PLISTURL"
def plistArchiveUrl = "PLISTARCHIVURL"
def aboUrl = "ABOURL"
def checkLoginUrl = "CHECKLOGINURL"
def resourceUrl = "RESOURCEURL"
def archiveUrl = "ARCHIVEURL"

apply plugin: 'idea'

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

apply plugin: 'com.android.application'
apply plugin: 'com.github.gfx.ribbonizer'

def overheadPath

File tcLocalPropsFile = project.rootProject.file('tc_local.properties')
if (tcLocalPropsFile.exists()) {
    logger.quiet('Found ' + tcLocalPropsFile)
    def tcLocalProps = new Properties()
    tcLocalProps.load(tcLocalPropsFile.newDataInputStream())
    overheadPath = tcLocalProps.getProperty("overheadpath")
} else {
    logger.error('tc_local.properties not found')
}

if (overheadPath == null) {
    overheadPath = System.getenv("overheadpath")
}

if (overheadPath != null) {
    logger.quiet('Found ' + ":" + overheadPath)
    project.ext.set("overheadPath", overheadPath)
    File extraGradleFile = new File(overheadPath, project.name + ".gradle")
    if (extraGradleFile.exists()) {
        logger.quiet('Found ' + extraGradleFile)
        apply from: extraGradleFile
    } else {
        logger.error(extraGradleFile + " not found")
    }
} else {
    logger.error('overheadpath not set')
}




import com.android.build.OutputFile


android {

    sourceSets {
        staging {
            java {
                srcDir 'src/debug/java'
            }
        }
    }

    compileSdkVersion compileSdkVer
    buildToolsVersion buildToolsVer
    defaultConfig {
        resConfigs "en", "de"
        minSdkVersion minSdkVer
        targetSdkVersion targetSdkVer
        versionCode versionMajor * 1000 + versionMinor * 100 + versionPatch * 10 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
    }
    splits {
        abi {
            // Enables building multiple APKs per ABI.
            enable true

            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for x86, armeabi-v7a, and mips.
            // Resets the list of ABIs that Gradle should create APKs for to none.
            reset()
            // Specifies a list of ABIs that Gradle should create APKs for.
            include "x86", "x86_64", "armeabi-v7a", "arm64-v8a"

            // Specifies that we do not want to also generate a universal APK that includes all ABIs.
            universalApk true

        }
    }
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
    lintOptions {
        abortOnError false
    }
    buildTypes {
        debug {
            debuggable true
            versionNameSuffix " Debug"
            applicationIdSuffix ".debug"
        }
        staging.initWith(buildTypes.debug)
        staging {
            versionNameSuffix " Staging"
            applicationIdSuffix ".staging"
        }
        release {
            zipAlignEnabled true
            minifyEnabled true
            shrinkResources true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }


    productFlavors {
        taz {
            applicationId "de.thecode.android.tazreader"
            resValue 'string', 'app_name', 'taz.app'
            buildConfigField 'String', plistUrl, tazPlist
            buildConfigField 'String', plistArchiveUrl, tazPlistArchiv
            buildConfigField 'String', aboUrl, tazAboUrl
            buildConfigField 'String', checkLoginUrl, tazCheckLogin
            buildConfigField 'String', resourceUrl, tazResourceUrl
            buildConfigField 'String', archiveUrl, tazArchiveUrl
        }
        lmd {
            applicationId "de.thecode.lmd"
            resValue 'string', 'app_name', 'LMd'
            buildConfigField 'String', plistUrl, lmdPlist
            buildConfigField 'String', plistArchiveUrl, lmdPlistArchiv
            buildConfigField 'String', aboUrl, lmdAboUrl
            buildConfigField 'String', checkLoginUrl, lmdCheckLogin
            buildConfigField 'String', resourceUrl, lmdResourceUrl
            buildConfigField 'String', archiveUrl, lmdArchiveUrl
        }
    }

    applicationVariants.all { variant ->
        def appName = variant.mergedFlavor.resValues.get('app_name').getValue()
        appName = "${appName}"
        if (!variant.buildType.name.equalsIgnoreCase("release")) {
            appName += " " + variant.buildType.name.toUpperCase()
        }
        variant.resValue 'string', 'app_name', appName
        if (variant.buildType.name.equalsIgnoreCase("staging")) {
            variant.getProductFlavors().each { flavor ->
                if (flavor.name.equalsIgnoreCase('taz')) {
                    variant.buildConfigField 'String', plistUrl, tazStagingPlist
                    variant.buildConfigField 'String', plistArchiveUrl, tazStagingPlistArchiv
                } else if (flavor.name.equalsIgnoreCase('lmd')) {
                    variant.buildConfigField 'String', plistUrl, lmdStagingPlist
                    variant.buildConfigField 'String', plistArchiveUrl, lmdStagingPlistArchiv
                }

            }
        }
    }

    // Map for the version code that gives each ABI a value.
    def abiCodes = ['universal':0,'armeabi': 1, 'armeabi-v7a': 2, 'arm64-v8a':3, 'mips': 4, 'mips64': 5, 'x86': 6, 'x86_64': 7].withDefault {0}

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def baseAbiVersionCode = abiCodes.get(output.getFilter(OutputFile.ABI))
            output.versionCodeOverride = baseAbiVersionCode * 100000 + variant.versionCode;
            output.versionNameOverride = variant.versionName + " " + abiCodes.find{it.value == baseAbiVersionCode}.key
        }
    }

    variantFilter { variant ->
        variant.getFlavors().each { flavor ->
            if (flavor.name.equalsIgnoreCase('lmd')) {
                variant.setIgnore(true)
            }
        }
    }
}

repositories {
    maven { url "https://s3.amazonaws.com/repo.commonsware.com" }
    maven { url 'https://maven.fabric.io/public' }
}

dependencies {
    compile "com.android.support:appcompat-v7:$supportLibVer"
    compile "com.android.support:recyclerview-v7:$supportLibVer"
    compile "com.android.support:design:$supportLibVer"
    compile "com.android.support:support-v4:$supportLibVer"
    compile "com.android.support:cardview-v7:$supportLibVer"

    compile 'com.squareup.okhttp3:okhttp:3.6.0'
    compile 'com.squareup.okhttp3:logging-interceptor:3.6.0'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.jakewharton.picasso:picasso2-okhttp3-downloader:1.1.0'

    compile 'com.googlecode.plist:dd-plist:1.8'
    compile 'com.commonsware.cwac:provider:0.2.3'
    compile 'de.greenrobot:eventbus:2.4.0'

    debugCompile 'com.facebook.stetho:stetho:1.4.1'
    debugCompile 'com.facebook.stetho:stetho-js-rhino:1.4.1'
    debugCompile 'com.facebook.stetho:stetho-okhttp3:1.4.1'
    stagingCompile 'com.facebook.stetho:stetho:1.4.1'
    stagingCompile 'com.facebook.stetho:stetho-js-rhino:1.4.1'
    stagingCompile 'com.facebook.stetho:stetho-okhttp3:1.4.1'

    compile 'com.github.jrejaud:ViewPagerIndicator2:0.0.1'
    compile 'commons-io:commons-io:2.5'

    compile 'com.jakewharton.timber:timber:4.5.1'

    compile 'uk.co.chrisjenx:calligraphy:2.1.0'
    compile 'com.yqritc:recyclerview-flexibledivider:1.2.9'

    compile 'com.gitlab.matecode:androiddialog:1.2.29'

    compile 'com.scottyab:aescrypt:0.0.1'

    compile 'com.github.matecode:Snacky:1.0.2'

    compile 'ch.acra:acra:4.9.2'

    compile 'com.github.KeepSafe:TapTargetView:-SNAPSHOT'


}
